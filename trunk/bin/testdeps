#!/usr/bin/perl

use strict;
no warnings;
use Getopt::Long;
my %args;
my %deps;
GetOptions(
    \%args,                               
	'v|verbose',
    'install',
    'download=s',
    'repository=s'
);

unless (keys %args) {
    help();
    exit(0);
}

# Set up defaults
$args{'with-CORE'} = 1;
{
  my $section;
  my %always_show_sections = (
    perl => 1,
    users => 1,
  );

  sub section {
    my $s = shift;
    $section = $s;
    print "$s:\n";
  }

  my $any_missing = 0;
  sub found {
    my $msg = shift;
    my $test = shift;
    my $extra = shift;
  
    $any_missing = 1 unless $test;
    if ($args{'v'} or not $test or $always_show_sections{$section}) {
      print "\t$msg...";
      print $test ? "found" : "MISSING";
      print "\n";
    }
    
    print "\t\t$extra\n" if defined $extra;
  }

  sub conclude {
    if ($any_missing) {
      print "\nSOMETHING WAS MISSING!\n";
    } else {
      print "\nEverything was found.\n";
    }
  }
}

sub help {

    print <<'.';

By default, testdeps determine whether you have 
installed all the perl modules Workhorse needs to run.

	--install		Install missing modules

The following switches will tell the tool to check for specific dependencies

You can also specify -v or --verbose to list the status of all dependencies,
rather than just the missing ones.
.
}


sub _ {
    map { /(\S+)\s*(\S*)/; $1 => ($2 ? $2 :'') } split ( /\n/, $_[0] );
}

$deps{'CORE'} = [ _( << '.') ];
Proc::PID::File 1.24
Proc::Daemon
File::Spec
Sys::Syslog
Carp
Module::Find
Net::XMPP2
Net::XMPP2::IM::Connection
Net::XMPP2::Ext::Disco
Net::XMPP2::Ext::MUC
Config::Merge
Net::DNS
Net::SMTP
Net::LibIDN
XML::DOM
XML::Parser::PerlSAX
Date::Manip
Parse::Yapp::Driver
Config::General
AnyEvent
Object::Event
XML::Writer
XML::Parser::Expat
MIME::Base64
Authen::SASL
Net::SSLeay
Digest::SHA1
Data::Alias
Config::Any
IO::Tty
.

if ($args{'download'}) {

    download_mods();
}


foreach my $type (keys %args) {
    next unless ($type =~ /^with-(.*?)$/);
    my $type = $1;
    section("$type dependencies");
    my @deps = (@{$deps{$type}});
    while (@deps) {
        my $module = shift @deps;
        my $version = shift @deps;
        my $ret = test_dep($module, $version);	

        if ($args{'install'} && !$ret) {
            resolve_dep($module);		
        }
    }
}

conclude();

sub test_dep {
    my $module = shift;
    my $version = shift;

    eval "use $module $version ()";
    if ($@) {
        my $error = $@;
        $error =~ s/\n(.*)$//s;
        undef $error unless $error =~ /this is only/;
        found("$module $version", 0, $error);

        return undef;
    } else {
        found("$module $version", 1);
        return 1;
    }
}

sub resolve_dep {
    my $module = shift;
    system( qq[/usr/bin/perl -MCPAN -e'install("$module")'] );
}

sub download_mods {
    my %modules;
    use CPAN;
    
    foreach my $key (keys %deps) {
        my @deps = (@{$deps{$key}});
        while (@deps) {
            my $mod = shift @deps;
            my $ver = shift @deps;
            next if ($mod =~ /^(DBD-|Apache-Request)/);
            $modules{$mod} = $ver;
        }
    }
    my @mods = keys %modules;
    CPAN::get();
    my $moddir = $args{'download'};
    foreach my $mod (@mods) {
        $CPAN::Config->{'build_dir'} = $moddir;
        CPAN::get($mod);
    }

    opendir(DIR, $moddir);
    while ( my $dir = readdir(DIR)) {
        print "Dir is $dir\n";
        next if ( $dir =~ /^\.\.?$/);

        # Skip things we've previously tagged
        my $out = `svn ls $args{'repository'}/tags/$dir`;
        next if ($out);

        if ($dir =~ /^(.*)-(.*?)$/) {
            `svn_load_dirs -no_user_input -t tags/$dir -v $args{'repository'} dists/$1 $moddir/$dir`;
            `rm -rf $moddir/$dir`;

        }

    }
    closedir(DIR);
    exit;
}

1;
